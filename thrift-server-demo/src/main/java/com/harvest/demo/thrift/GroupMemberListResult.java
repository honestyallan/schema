/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.harvest.demo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-29")
public class GroupMemberListResult implements org.apache.thrift.TBase<GroupMemberListResult, GroupMemberListResult._Fields>, java.io.Serializable, Cloneable, Comparable<GroupMemberListResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupMemberListResult");

  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("err_code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("err_msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_MEMEBER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMemeberList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupMemberListResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupMemberListResultTupleSchemeFactory());
  }

  public int err_code; // required
  public String err_msg; // required
  public List<GroupMember> groupMemeberList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERR_CODE((short)1, "err_code"),
    ERR_MSG((short)2, "err_msg"),
    GROUP_MEMEBER_LIST((short)3, "groupMemeberList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERR_CODE
          return ERR_CODE;
        case 2: // ERR_MSG
          return ERR_MSG;
        case 3: // GROUP_MEMEBER_LIST
          return GROUP_MEMEBER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERR_CODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("err_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("err_msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_MEMEBER_LIST, new org.apache.thrift.meta_data.FieldMetaData("groupMemeberList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupMember.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupMemberListResult.class, metaDataMap);
  }

  public GroupMemberListResult() {
  }

  public GroupMemberListResult(
    int err_code,
    String err_msg,
    List<GroupMember> groupMemeberList)
  {
    this();
    this.err_code = err_code;
    setErr_codeIsSet(true);
    this.err_msg = err_msg;
    this.groupMemeberList = groupMemeberList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupMemberListResult(GroupMemberListResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.err_code = other.err_code;
    if (other.isSetErr_msg()) {
      this.err_msg = other.err_msg;
    }
    if (other.isSetGroupMemeberList()) {
      List<GroupMember> __this__groupMemeberList = new ArrayList<GroupMember>(other.groupMemeberList.size());
      for (GroupMember other_element : other.groupMemeberList) {
        __this__groupMemeberList.add(new GroupMember(other_element));
      }
      this.groupMemeberList = __this__groupMemeberList;
    }
  }

  public GroupMemberListResult deepCopy() {
    return new GroupMemberListResult(this);
  }

  @Override
  public void clear() {
    setErr_codeIsSet(false);
    this.err_code = 0;
    this.err_msg = null;
    this.groupMemeberList = null;
  }

  public int getErr_code() {
    return this.err_code;
  }

  public GroupMemberListResult setErr_code(int err_code) {
    this.err_code = err_code;
    setErr_codeIsSet(true);
    return this;
  }

  public void unsetErr_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERR_CODE_ISSET_ID);
  }

  /** Returns true if field err_code is set (has been assigned a value) and false otherwise */
  public boolean isSetErr_code() {
    return EncodingUtils.testBit(__isset_bitfield, __ERR_CODE_ISSET_ID);
  }

  public void setErr_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERR_CODE_ISSET_ID, value);
  }

  public String getErr_msg() {
    return this.err_msg;
  }

  public GroupMemberListResult setErr_msg(String err_msg) {
    this.err_msg = err_msg;
    return this;
  }

  public void unsetErr_msg() {
    this.err_msg = null;
  }

  /** Returns true if field err_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetErr_msg() {
    return this.err_msg != null;
  }

  public void setErr_msgIsSet(boolean value) {
    if (!value) {
      this.err_msg = null;
    }
  }

  public int getGroupMemeberListSize() {
    return (this.groupMemeberList == null) ? 0 : this.groupMemeberList.size();
  }

  public java.util.Iterator<GroupMember> getGroupMemeberListIterator() {
    return (this.groupMemeberList == null) ? null : this.groupMemeberList.iterator();
  }

  public void addToGroupMemeberList(GroupMember elem) {
    if (this.groupMemeberList == null) {
      this.groupMemeberList = new ArrayList<GroupMember>();
    }
    this.groupMemeberList.add(elem);
  }

  public List<GroupMember> getGroupMemeberList() {
    return this.groupMemeberList;
  }

  public GroupMemberListResult setGroupMemeberList(List<GroupMember> groupMemeberList) {
    this.groupMemeberList = groupMemeberList;
    return this;
  }

  public void unsetGroupMemeberList() {
    this.groupMemeberList = null;
  }

  /** Returns true if field groupMemeberList is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupMemeberList() {
    return this.groupMemeberList != null;
  }

  public void setGroupMemeberListIsSet(boolean value) {
    if (!value) {
      this.groupMemeberList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERR_CODE:
      if (value == null) {
        unsetErr_code();
      } else {
        setErr_code((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErr_msg();
      } else {
        setErr_msg((String)value);
      }
      break;

    case GROUP_MEMEBER_LIST:
      if (value == null) {
        unsetGroupMemeberList();
      } else {
        setGroupMemeberList((List<GroupMember>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERR_CODE:
      return getErr_code();

    case ERR_MSG:
      return getErr_msg();

    case GROUP_MEMEBER_LIST:
      return getGroupMemeberList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERR_CODE:
      return isSetErr_code();
    case ERR_MSG:
      return isSetErr_msg();
    case GROUP_MEMEBER_LIST:
      return isSetGroupMemeberList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupMemberListResult)
      return this.equals((GroupMemberListResult)that);
    return false;
  }

  public boolean equals(GroupMemberListResult that) {
    if (that == null)
      return false;

    boolean this_present_err_code = true;
    boolean that_present_err_code = true;
    if (this_present_err_code || that_present_err_code) {
      if (!(this_present_err_code && that_present_err_code))
        return false;
      if (this.err_code != that.err_code)
        return false;
    }

    boolean this_present_err_msg = true && this.isSetErr_msg();
    boolean that_present_err_msg = true && that.isSetErr_msg();
    if (this_present_err_msg || that_present_err_msg) {
      if (!(this_present_err_msg && that_present_err_msg))
        return false;
      if (!this.err_msg.equals(that.err_msg))
        return false;
    }

    boolean this_present_groupMemeberList = true && this.isSetGroupMemeberList();
    boolean that_present_groupMemeberList = true && that.isSetGroupMemeberList();
    if (this_present_groupMemeberList || that_present_groupMemeberList) {
      if (!(this_present_groupMemeberList && that_present_groupMemeberList))
        return false;
      if (!this.groupMemeberList.equals(that.groupMemeberList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_err_code = true;
    list.add(present_err_code);
    if (present_err_code)
      list.add(err_code);

    boolean present_err_msg = true && (isSetErr_msg());
    list.add(present_err_msg);
    if (present_err_msg)
      list.add(err_msg);

    boolean present_groupMemeberList = true && (isSetGroupMemeberList());
    list.add(present_groupMemeberList);
    if (present_groupMemeberList)
      list.add(groupMemeberList);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupMemberListResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErr_code()).compareTo(other.isSetErr_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErr_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err_code, other.err_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErr_msg()).compareTo(other.isSetErr_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErr_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err_msg, other.err_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupMemeberList()).compareTo(other.isSetGroupMemeberList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupMemeberList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMemeberList, other.groupMemeberList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupMemberListResult(");
    boolean first = true;

    sb.append("err_code:");
    sb.append(this.err_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("err_msg:");
    if (this.err_msg == null) {
      sb.append("null");
    } else {
      sb.append(this.err_msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupMemeberList:");
    if (this.groupMemeberList == null) {
      sb.append("null");
    } else {
      sb.append(this.groupMemeberList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupMemberListResultStandardSchemeFactory implements SchemeFactory {
    public GroupMemberListResultStandardScheme getScheme() {
      return new GroupMemberListResultStandardScheme();
    }
  }

  private static class GroupMemberListResultStandardScheme extends StandardScheme<GroupMemberListResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupMemberListResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.err_code = iprot.readI32();
              struct.setErr_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.err_msg = iprot.readString();
              struct.setErr_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_MEMEBER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.groupMemeberList = new ArrayList<GroupMember>(_list0.size);
                GroupMember _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new GroupMember();
                  _elem1.read(iprot);
                  struct.groupMemeberList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setGroupMemeberListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupMemberListResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.err_code);
      oprot.writeFieldEnd();
      if (struct.err_msg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.err_msg);
        oprot.writeFieldEnd();
      }
      if (struct.groupMemeberList != null) {
        oprot.writeFieldBegin(GROUP_MEMEBER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupMemeberList.size()));
          for (GroupMember _iter3 : struct.groupMemeberList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupMemberListResultTupleSchemeFactory implements SchemeFactory {
    public GroupMemberListResultTupleScheme getScheme() {
      return new GroupMemberListResultTupleScheme();
    }
  }

  private static class GroupMemberListResultTupleScheme extends TupleScheme<GroupMemberListResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupMemberListResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetErr_code()) {
        optionals.set(0);
      }
      if (struct.isSetErr_msg()) {
        optionals.set(1);
      }
      if (struct.isSetGroupMemeberList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetErr_code()) {
        oprot.writeI32(struct.err_code);
      }
      if (struct.isSetErr_msg()) {
        oprot.writeString(struct.err_msg);
      }
      if (struct.isSetGroupMemeberList()) {
        {
          oprot.writeI32(struct.groupMemeberList.size());
          for (GroupMember _iter4 : struct.groupMemeberList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupMemberListResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.err_code = iprot.readI32();
        struct.setErr_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.err_msg = iprot.readString();
        struct.setErr_msgIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupMemeberList = new ArrayList<GroupMember>(_list5.size);
          GroupMember _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new GroupMember();
            _elem6.read(iprot);
            struct.groupMemeberList.add(_elem6);
          }
        }
        struct.setGroupMemeberListIsSet(true);
      }
    }
  }

}

